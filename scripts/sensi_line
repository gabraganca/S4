#!/usr/bin/python
# -*- coding: latin-1 -*-
"""
The purpose of this sciprt is to make a nimated plot of how a stellar
parameter change on a spectral line or wavelength coverage.

author: Gustavo Bragan√ßa
e-mail: ga.braganca@gmail.com
Please feel free to use and modify this, but keep the above information. Thanks!

Based on the Basic Animation basic_animation.py from
http://jakevdp.github.io/blog/2012/08/18/matplotlib-animation-tutorial/
"""

import sys
import matplotlib as mpl
mpl.use( "qt4agg" )
import matplotlib.pyplot as plt
import matplotlib.animation as animation
import re
import s4

def main(v_param, values, wstart, wend, spath = None):
    """
    Parameters
    ---------

    v_param: str;
        Stelllar parameter to be changed.

    values: array;
        Array of values to plot the parameter.

    wstart: float;
        Beginning wavelength.

    wend: float;
        Ending wavelength.

    spath: str;
        Path to synplot. If not set, it will use the S4 default.
    """

    # First set up the figure, the axis, and the plot element we want to animate
    fig = plt.figure()
    ax = plt.axes(xlim=(wstart, wend), ylim=(0, 1.05))
    ax.set_xlabel('Wavelength ($\AA$)')
    ax.set_ylabel('Normalized Flux')
    param_text = ax.text(0.8, 0.05, '', transform=ax.transAxes)
    line, = ax.plot([], [], lw=2)

    # initialization function: plot the background of each frame
    def init():
        line.set_data([], [])
        param_text.set_text('')
        return line, param_text

    # set basic stellar parameters params
    params = dict(wstart=wstart, wend=wend, relative=1)

    #print teff, logg, params
    #synthesize
    def syn(i):
         # check if v_param is teff or logg
        if v_param == 'teff':
            teff = values[i]
            logg = 4.0
        elif v_param == 'logg':
            teff = 20000
            logg = values[i]
        else:
            teff = 20000
            logg = 4.0
            params[v_param] = values[i]

        syn = s4.synthesis.Synplot(teff, logg, spath, **params)
        syn.run()
        line.set_data(syn.spectrum[:, 0], syn.spectrum[:, 1])
        param_text.set_text('{}={}'.format(v_param, values[i]))
        return line, param_text

    # call the animator.  blit=True means only re-draw the parts that have
    #changed.
    anim = animation.FuncAnimation(fig, syn, init_func=init,
                                   frames=len(values), interval=20, blit=True)

    # save the animation as an mp4.  This requires ffmpeg or mencoder to be
    # installed.  The extra_args ensure that the x264 codec is used, so that
    # the video can be embedded in html5.  You may need to adjust this for
    # your system: for more information, see
    # http://matplotlib.sourceforge.net/api/animation_api.html
    anim.save('synthesis_animation.mp4', fps= 1, 
              extra_args=['-vcodec', 'libx264'])
    plt.show()


if __name__ == '__main__':

    V_PARAM = sys.argv[1]
    VALUES = map(float, re.findall('\-?\d+(?:\.\d+)*', sys.argv[2]))
    WSTART = float(sys.argv[3])
    WEND = float(sys.argv[4])
    if len(sys.argv) == 6:
        SPATH = sys.argv[5] # Synplot path
    else:
        SPATH = None

    main(V_PARAM, VALUES, WSTART, WEND, SPATH)
